-- phpMyAdmin SQL Dump
-- version 2.11.5
-- http://www.phpmyadmin.net
--
-- 主机: localhost
-- 生成日期: 2008 年 09 月 04 日 22:55
-- 服务器版本: 5.0.51
-- PHP 版本: 5.2.5

SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";

--
-- 数据库: `test`
--

-- --------------------------------------------------------

--
-- 表的结构 `blog_comments`
--

DROP TABLE IF EXISTS `blog_comments`;
CREATE TABLE IF NOT EXISTS `blog_comments` (
  `comment_id` int(11) NOT NULL auto_increment,
  `post_id` int(11) NOT NULL default '0',
  `body` longtext NOT NULL,
  `created` int(11) NOT NULL,
  PRIMARY KEY  (`comment_id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=6 ;

--
-- 导出表中的数据 `blog_comments`
--

INSERT INTO `blog_comments` (`comment_id`, `post_id`, `body`, `created`) VALUES(5, 29, '[quote]\r\nCopyright © 1997 - 2007 by the PHP Documentation Group. This material may be distributed only subject to the terms and conditions set forth in the Open Publication License, v1.0 or later. A copy of the Open Publication License is distributed with this manual, the latest version is presently available at » http://www.opencontent.org/openpub/. \r\n[/quote]', 1215676864);
INSERT INTO `blog_comments` (`comment_id`, `post_id`, `body`, `created`) VALUES(3, 29, 'FireFox has an XForms plugin that works with the latest nightly builds. Check out http://www.mozilla.org/projects/xforms/ for more info. For IE support, there''s an ActiveX control from Novell (http://developer.novell.com/xforms/) and one from x-port.net (http://www.formsplayer.com/).\r\nThere''s also a JavaScript-based one coming out called FormFaces which looks very promising, especially since there are no plugins required and it works in IE, FF, and Opera: http://www.formfaces.com/', 1214192269);
INSERT INTO `blog_comments` (`comment_id`, `post_id`, `body`, `created`) VALUES(4, 29, 'Since HTTP_RAW_POST_DATA requires a configuration to be generated and is not enabled as a default value, you will probably have to use the PHP STDIN stream to get the raw data. It''s probably better to use this method as the raw data will not be generated every time, even when not needed.\r\n\r\n[code]\r\n<?php\r\n$fp = fopen( "php://stdin", "r" );\r\n$data = '''';\r\nwhile( !feof( $fp ) )\r\n   $data .= fgets( $fp );\r\nfclose( $fp );\r\n?>\r\n[/code]', 1214192287);

-- --------------------------------------------------------

--
-- 表的结构 `blog_posts`
--

DROP TABLE IF EXISTS `blog_posts`;
CREATE TABLE IF NOT EXISTS `blog_posts` (
  `post_id` int(11) NOT NULL auto_increment,
  `title` varchar(255) NOT NULL,
  `body` longtext NOT NULL,
  `created` int(11) NOT NULL,
  `updated` int(11) NOT NULL,
  `comments_count` int(11) NOT NULL default '0',
  `tags_count` int(11) NOT NULL default '0',
  PRIMARY KEY  (`post_id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=31 ;

--
-- 导出表中的数据 `blog_posts`
--

INSERT INTO `blog_posts` (`post_id`, `title`, `body`, `created`, `updated`, `comments_count`, `tags_count`) VALUES(29, '[manual] Chapter 4. Dealing with XForms', '» XForms defines a variation on traditional webforms which allows them to be used on a wider variety of platforms and browsers or even non-traditional media such as PDF documents. \r\n\r\nThe first key difference in XForms is how the form is sent to the client. » XForms for HTML Authors contains a detailed description of how to create XForms, for the purpose of this tutorial we''ll only be looking at a simple example. \r\n\r\n\r\n[b]Example 4.1. A simple XForms search form[/b]\r\n\r\n[code]\r\n<h:html xmlns:h="http://www.w3.org/1999/xhtml"\r\n       xmlns="http://www.w3.org/2002/xforms">\r\n<h:head>\r\n<h:title>Search</h:title>\r\n<model>\r\n <submission action="http://example.com/search"\r\n             method="post" id="s"/>\r\n</model>\r\n</h:head>\r\n<h:body>\r\n<h:p>\r\n <input ref="q"><label>Find</label></input>\r\n <submit submission="s"><label>Go</label></submit>\r\n</h:p>\r\n</h:body>\r\n</h:html>\r\n[/code]\r\n\r\nThe above form displays a text input box (named q), and a submit button. When the submit button is clicked, the form will be sent to the page referred to by action. \r\n\r\nHere''s where it starts to look different from your web application''s point of view. In a normal HTML form, the data would be sent as application/x-www-form-urlencoded, in the XForms world however, this information is sent as XML formatted data. \r\n\r\nIf you''re choosing to work with XForms then you probably want that data as XML, in that case, look in $HTTP_RAW_POST_DATA where you''ll find the XML document generated by the browser which you can pass into your favorite XSLT engine or document parser. \r\n\r\nIf you''re not interested in formatting and just want your data to be loaded into the traditional $_POST variable, you can instruct the client browser to send it as application/x-www-form-urlencoded by changing the method attribute to urlencoded-post. \r\n\r\n\r\n[quote]\r\n[b]Note:[/b]\r\n\r\nAs of this writing, many browsers do not support XForms. Check your browser version if the above examples fails. \r\n[/quote]\r\n', 1214186615, 1216013197, 0, 0);
INSERT INTO `blog_posts` (`post_id`, `title`, `body`, `created`, `updated`, `comments_count`, `tags_count`) VALUES(30, 'pathinfo', '[quote]\r\nReturns information about a file path (PHP 4 >= 4.0.3, PHP 5) \r\nmixed pathinfo ( string path [, int options] )\r\n[/quote]\r\n\r\n[b]pathinfo()[/b] returns an associative array containing information about path. \r\n\r\n<h3>Parameters</h3>\r\n\r\n[*] path\r\n  [*] The path being checked. \r\n\r\n[*] options\r\n  [*] You can specify which elements are returned with optional parameter options. It composes from PATHINFO_DIRNAME, PATHINFO_BASENAME, PATHINFO_EXTENSION and PATHINFO_FILENAME. It defaults to return all elements. \r\n\r\nReturn Values\r\nThe following associative array elements are returned: dirname, basename extension (if any), and filename. \r\n\r\nIf options is used, this function will return a string if not all elements are requested. \r\n\r\nChangeLog\r\nVersion Description \r\n5.2.0 The PATHINFO_FILENAME constant was added.  \r\n\r\nExamples\r\nExample 664. pathinfo() Example\r\ncopy to clipboard\r\n<?php\r\n$path_parts = pathinfo(''/www/htdocs/index.html'');\r\n\r\necho $path_parts[''dirname''], "\\n";\r\necho $path_parts[''basename''], "\\n";\r\necho $path_parts[''extension''], "\\n";\r\necho $path_parts[''filename''], "\\n"; // since PHP 5.2.0\r\n?>\r\n\r\nThe above example will output:\r\n\r\ncopy to clipboard\r\n/www/htdocs\r\nindex.html\r\nhtml\r\nindex\r\n', 1220540053, 1220540053, 0, 0);

-- --------------------------------------------------------

--
-- 表的结构 `blog_posts_has_tags`
--

DROP TABLE IF EXISTS `blog_posts_has_tags`;
CREATE TABLE IF NOT EXISTS `blog_posts_has_tags` (
  `post_id` int(11) NOT NULL,
  `tag_id` int(11) NOT NULL,
  PRIMARY KEY  (`post_id`,`tag_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

--
-- 导出表中的数据 `blog_posts_has_tags`
--

INSERT INTO `blog_posts_has_tags` (`post_id`, `tag_id`) VALUES(29, 19);
INSERT INTO `blog_posts_has_tags` (`post_id`, `tag_id`) VALUES(29, 20);
INSERT INTO `blog_posts_has_tags` (`post_id`, `tag_id`) VALUES(30, 15);
INSERT INTO `blog_posts_has_tags` (`post_id`, `tag_id`) VALUES(30, 16);

-- --------------------------------------------------------

--
-- 表的结构 `blog_tags`
--

DROP TABLE IF EXISTS `blog_tags`;
CREATE TABLE IF NOT EXISTS `blog_tags` (
  `tag_id` int(11) NOT NULL auto_increment,
  `label` varchar(64) NOT NULL,
  PRIMARY KEY  (`tag_id`),
  UNIQUE KEY `label` (`label`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=21 ;

--
-- 导出表中的数据 `blog_tags`
--

INSERT INTO `blog_tags` (`tag_id`, `label`) VALUES(18, 'basic');
INSERT INTO `blog_tags` (`tag_id`, `label`) VALUES(15, 'php');
INSERT INTO `blog_tags` (`tag_id`, `label`) VALUES(16, 'manual');
INSERT INTO `blog_tags` (`tag_id`, `label`) VALUES(17, 'c++');
INSERT INTO `blog_tags` (`tag_id`, `label`) VALUES(19, 'python');
INSERT INTO `blog_tags` (`tag_id`, `label`) VALUES(20, 'ruby');
